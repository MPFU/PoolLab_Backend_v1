// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PoolLab.Infrastructure;

#nullable disable

namespace PoolLab.Infrastructure.Migrations
{
    [DbContext(typeof(PoolLabDbv1Context))]
    partial class PoolLabDbv1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PoolLab.Core.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("Rank")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubID");

                    b.Property<int?>("Tier")
                        .HasColumnType("int");

                    b.Property<int?>("TotalTime")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SubId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.AccountVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("VoucherID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VoucherID");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("VoucherID");

                    b.ToTable("AccountVoucher", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descript")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.HasKey("Id");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descript")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("NewPrice")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("BilliardPrice", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardTable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AreaID");

                    b.Property<Guid?>("BilliardTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BilliardTypeID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descript")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PriceID");

                    b.Property<string>("Qrcode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BilliardTypeId");

                    b.HasIndex("PriceId");

                    b.HasIndex("StoreId");

                    b.ToTable("BilliardTable", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descript")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BilliardType", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardTypeArea", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AreaID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AreaID");

                    b.Property<Guid?>("BilliardTypeID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BilliardTypeID");

                    b.Property<Guid?>("StoreID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.HasKey("Id");

                    b.HasIndex("AreaID");

                    b.HasIndex("BilliardTypeID");

                    b.HasIndex("StoreID");

                    b.ToTable("BilliardTypeArea", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BilliardTableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BilliardTableID");

                    b.Property<Guid?>("BilliardTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BilliardTypeID");

                    b.Property<DateOnly?>("BookingDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.Property<TimeOnly?>("TimeEnd")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<TimeOnly?>("TimeStart")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BilliardTableId");

                    b.HasIndex("BilliardTypeId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CompanyImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descript")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.ConfigTable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Deposit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TimeCancelBook")
                        .HasColumnType("int");

                    b.Property<int?>("TimeDelay")
                        .HasColumnType("int");

                    b.Property<int?>("TimeHold")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ConfigTable", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descript")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StoreId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ManagerID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.GroupProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descript")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GroupProduct", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.MentorInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MentorImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("MentorInfo", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(11, 1)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(11, 0)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BilliardTableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BilliardTableID");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BilliardTableId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.PlayTime", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BilliardTableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BilliardTableID");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<decimal?>("TotalTime")
                        .HasColumnType("decimal(11, 2)");

                    b.HasKey("Id");

                    b.HasIndex("BilliardTableId");

                    b.HasIndex("OrderId");

                    b.ToTable("PlayTime", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descript")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<Guid?>("ProductGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductGroupID");

                    b.Property<string>("ProductImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProductTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductTypeID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UnitID");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descript")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.RegisteredCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StoreId");

                    b.ToTable("RegisteredCourse", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Rated")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descript")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("Rated")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StoreImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeOnly?>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("TimeStart")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descript")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SubTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubTypeID");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SubTypeId");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.SubscriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descript")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionType", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(11, 0)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderID");

                    b.Property<int?>("PaymentCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SubId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubID");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descript")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TypeCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("VouCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("PoolLab.Core.Models.Account", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Company", "Company")
                        .WithMany("Accounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Account_Company");

                    b.HasOne("PoolLab.Core.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Account_Role");

                    b.HasOne("PoolLab.Core.Models.Store", "Store")
                        .WithMany("Accounts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Account_Store");

                    b.HasOne("PoolLab.Core.Models.Subscription", "Sub")
                        .WithMany("Accounts")
                        .HasForeignKey("SubId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Account_Subscription");

                    b.Navigation("Company");

                    b.Navigation("Role");

                    b.Navigation("Store");

                    b.Navigation("Sub");
                });

            modelBuilder.Entity("PoolLab.Core.Models.AccountVoucher", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Account", "Account")
                        .WithMany("AccountVouchers")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_AccountVouchers_Account");

                    b.HasOne("PoolLab.Core.Models.Voucher", "Voucher")
                        .WithMany("AccountVouchers")
                        .HasForeignKey("VoucherID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_AccountVouchers_Voucher");

                    b.Navigation("Account");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardTable", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Area", "Area")
                        .WithMany("BilliardTables")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_BilliardTable_Area");

                    b.HasOne("PoolLab.Core.Models.BilliardType", "BilliardType")
                        .WithMany("BilliardTables")
                        .HasForeignKey("BilliardTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_BilliardTable_BilliardType");

                    b.HasOne("PoolLab.Core.Models.BilliardPrice", "Price")
                        .WithMany("BilliardTables")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_BilliardTable_BilliardPrice");

                    b.HasOne("PoolLab.Core.Models.Store", "Store")
                        .WithMany("BilliardTables")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_BilliardTable_Store");

                    b.Navigation("Area");

                    b.Navigation("BilliardType");

                    b.Navigation("Price");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardTypeArea", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Area", "Area")
                        .WithMany("BilliardTypeAreas")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_BilliardTypeArea_Area");

                    b.HasOne("PoolLab.Core.Models.BilliardType", "BilliardType")
                        .WithMany("BilliardTypeAreas")
                        .HasForeignKey("BilliardTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_BilliardTypeArea_BilliardType");

                    b.HasOne("PoolLab.Core.Models.Store", "Store")
                        .WithMany("BilliardTypeAreas")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_BilliardTypeArea_Store");

                    b.Navigation("Area");

                    b.Navigation("BilliardType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Booking", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Area", "Area")
                        .WithMany("Bookings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Booking_Area");

                    b.HasOne("PoolLab.Core.Models.BilliardTable", "BilliardTable")
                        .WithMany("Bookings")
                        .HasForeignKey("BilliardTableId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Booking_BilliardTable");

                    b.HasOne("PoolLab.Core.Models.BilliardType", "BilliardType")
                        .WithMany("Bookings")
                        .HasForeignKey("BilliardTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Booking_BilliardType");

                    b.HasOne("PoolLab.Core.Models.ConfigTable", "ConfigTable")
                        .WithMany("Bookings")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Booking_ConfigTable");

                    b.HasOne("PoolLab.Core.Models.Account", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Booking_Account");

                    b.HasOne("PoolLab.Core.Models.Store", "Store")
                        .WithMany("Bookings")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Booking_Store");

                    b.Navigation("Area");

                    b.Navigation("BilliardTable");

                    b.Navigation("BilliardType");

                    b.Navigation("ConfigTable");

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Course", b =>
                {
                    b.HasOne("PoolLab.Core.Models.MentorInfo", "MentorInfo")
                        .WithMany("Courses")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Course_MentorInfo");

                    b.HasOne("PoolLab.Core.Models.Store", "Store")
                        .WithMany("Courses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Course_Store");

                    b.Navigation("MentorInfo");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Event", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Account", "Manager")
                        .WithMany("Events")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Event_Account");

                    b.HasOne("PoolLab.Core.Models.Store", "Store")
                        .WithMany("Events")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Event_Store");

                    b.Navigation("Manager");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Order", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Account", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Order_Account");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PoolLab.Core.Models.OrderDetail", b =>
                {
                    b.HasOne("PoolLab.Core.Models.BilliardTable", "BilliardTable")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BilliardTableId")
                        .HasConstraintName("FK_OrderDetail_BilliardTable");

                    b.HasOne("PoolLab.Core.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("PoolLab.Core.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.Navigation("BilliardTable");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PoolLab.Core.Models.PlayTime", b =>
                {
                    b.HasOne("PoolLab.Core.Models.BilliardTable", "BilliardTable")
                        .WithMany("PlayTimes")
                        .HasForeignKey("BilliardTableId")
                        .HasConstraintName("FK_PlayTime_BilliardTable");

                    b.HasOne("PoolLab.Core.Models.Order", "Order")
                        .WithMany("PlayTimes")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_PlayTime_Order");

                    b.Navigation("BilliardTable");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Product", b =>
                {
                    b.HasOne("PoolLab.Core.Models.GroupProduct", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .HasConstraintName("FK_Product_GroupProduct");

                    b.HasOne("PoolLab.Core.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("FK_Product_ProductType");

                    b.HasOne("PoolLab.Core.Models.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Product_Unit");

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PoolLab.Core.Models.RegisteredCourse", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Course", "Course")
                        .WithMany("RegisteredCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_RegisteredCourse_Course");

                    b.HasOne("PoolLab.Core.Models.Store", "Store")
                        .WithMany("RegisteredCourses")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_RegisteredCourse_Store");

                    b.Navigation("Course");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Review", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Account", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Review_Account");

                    b.HasOne("PoolLab.Core.Models.Store", "Store")
                        .WithMany("Reviews")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Review_Store");

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Store", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Company", "Company")
                        .WithMany("Stores")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Store_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Subscription", b =>
                {
                    b.HasOne("PoolLab.Core.Models.SubscriptionType", "SubType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubTypeId")
                        .HasConstraintName("FK_Subscription_SubscriptionType");

                    b.Navigation("SubType");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Transaction", b =>
                {
                    b.HasOne("PoolLab.Core.Models.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Transaction_Account");

                    b.HasOne("PoolLab.Core.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Transaction_Order");

                    b.HasOne("PoolLab.Core.Models.Subscription", "Sub")
                        .WithMany("Payments")
                        .HasForeignKey("SubId")
                        .HasConstraintName("FK_Transaction_Subscription");

                    b.Navigation("Account");

                    b.Navigation("Order");

                    b.Navigation("Sub");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Account", b =>
                {
                    b.Navigation("AccountVouchers");

                    b.Navigation("Bookings");

                    b.Navigation("Events");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Area", b =>
                {
                    b.Navigation("BilliardTables");

                    b.Navigation("BilliardTypeAreas");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardPrice", b =>
                {
                    b.Navigation("BilliardTables");
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardTable", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("OrderDetails");

                    b.Navigation("PlayTimes");
                });

            modelBuilder.Entity("PoolLab.Core.Models.BilliardType", b =>
                {
                    b.Navigation("BilliardTables");

                    b.Navigation("BilliardTypeAreas");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Company", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("PoolLab.Core.Models.ConfigTable", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Course", b =>
                {
                    b.Navigation("RegisteredCourses");
                });

            modelBuilder.Entity("PoolLab.Core.Models.GroupProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PoolLab.Core.Models.MentorInfo", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("PlayTimes");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PoolLab.Core.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Store", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BilliardTables");

                    b.Navigation("BilliardTypeAreas");

                    b.Navigation("Bookings");

                    b.Navigation("Courses");

                    b.Navigation("Events");

                    b.Navigation("RegisteredCourses");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Subscription", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PoolLab.Core.Models.SubscriptionType", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Unit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PoolLab.Core.Models.Voucher", b =>
                {
                    b.Navigation("AccountVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
